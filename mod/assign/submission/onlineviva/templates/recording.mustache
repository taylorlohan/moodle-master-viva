<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title>Starting Viva</title>
</head>
<style>
    canvas {
        box-shadow: 0 0 10px gray;
        display: block;
    }
</style>
<h3 style="text-align: center;margin-top:10px;">Viva</h3>
<p style="text-align: center;margin-top:10px;color:grey">Answer the following questions according to your coursework</p>
<div style="text-align: center;margin-top:10px;">
    <canvas id="canvas" height=460 width=640 style="width:640px;margin:auto;"></canvas>
    <video src="" id="srcvideo" style="display:none;"></video>
    <p class="count"></p>
</div>
<div style="text-align: center;margin-top:10px;">
    <button id="startBtn" disabled>start recording</button>
    <button id="stopBtn" disabled>end recording</button>
</div>
<div style="text-align: center;margin-top:20px;">
    <p>Questions for viva</p>
    <table class="table table-striped">
        {{#questions}}
            <tr>
                <td></td>
                <td id="questions" class="text-left">{{{content}}}</td>
            </tr>
        {{/questions}}
        {{^questions}}
            <div class="card-body"><p>There are no results.</p></div>
        {{/questions}}
    </table>
</div>

<div
        id="test"
        data-assignment={{assignment}}> </div>
<div
        id="test1"
        data-submission={{submission}}> </div>
<div
        id="test2"
        data-chosenquestion={{chosenquestion}}> </div>
<div
        id="test3"
        data-timelimit={{timelimit}}> </div>



<script>
    var allChunks = [];
    let c=document.querySelector('#test3').dataset.timelimit;
    let assignment = document.querySelector('#test').dataset.assignment;
    let submission = document.querySelector('#test1').dataset.submission;
    let chosenquestion = document.querySelector('#test2').dataset.chosenquestion;
    let i=0;

    init();
    function init() {
        console.log('assignment is'+assignment);
        console.log('submission is'+submission);
        console.log('chosen total is '+chosenquestion);
        let table = document.getElementsByTagName('table')[0],
            rows = table.getElementsByTagName('tr'),
                text = 'textContent' in document ? 'textContent' : 'innerText';
        for (let j=0, len = rows.length; j < len; j++) {
            rows[j].children[0][text] = j+1;
        }
        const ctx = canvas.getContext('2d');
        ctx.fillStyle = 'white';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        navigator.mediaDevices.getUserMedia({
            audio:true,
            video: true
        })
                .then(function(mediaStream) {
                    var srcvideo = document.getElementById("srcvideo")
                    srcvideo.srcObject = mediaStream;
                    srcvideo.play()
                    playCanvas(srcvideo, ctx)
                })
        setRecorder();
        setFormatSelect('video/webm;codecs=vp8')
    }
    function playCanvas(srcvideo, ctx) {
        ctx.drawImage(srcvideo, 0, 0, 640, 460)
        requestAnimationFrame(() => {
            playCanvas(srcvideo, ctx)
        })
    }
    function setFormatSelect(format){
        if(!MediaRecorder.isTypeSupported(format)){
            alert(format)
            alert("unsupported type!");
            return;
        }
        allChunks = [];
        setRecorder(format)
    }
    function setRecorder(format) {
        const stream = canvas.captureStream(60);
        const audioTracks = stream.getAudioTracks();
        const videoTracks=stream.getVideoTracks();
        const recorder = new MediaRecorder(stream, {
            mimeType: format
        });
        recorder.ondataavailable = e => {
            allChunks.push(
                    e.data
            );
        }
        startBtn.disabled = false;
        startBtn.onclick = e => {
            recorder.start(10);
            timedCount();
            startBtn.disabled = true;
            stopBtn.disabled = false;
        }
        stopBtn.onclick = e => {
            recorder.stop();
            stream.getTracks().forEach( track => track.stop() );
            console.log('recorder has stopped')
            saveAudio();
            startBtn.disabled = false;
            stopBtn.disabled = true;
        }
        recorder.onstop=event => {
            allChunks.push(
                    e.data
            );
        }
    }
    function timedCount() {
        document.querySelector(".count").innerHTML = 'time left is' + c+' s';
        c = c - 1;
        if (c > 0) {
            let t = setTimeout(timedCount, 1000);
        } else {
            document.querySelector(".count").innerHTML = "Time is up!";
            stopBtn.click()
            return;
        }
    }
    function saveAudio() {
        const fullBlob = new Blob(allChunks, { type: 'video/mp4' });
        const uploadUrl = window.URL.createObjectURL(fullBlob);
        var myFormData = new FormData();
        myFormData.append('file',fullBlob);
        myFormData.append('assignment', assignment);
        myFormData.append('submission', submission);
        console.log(myFormData.get('assignment'));
        $.ajax({
            type: "POST",
            url: 'upload.php',
            data : myFormData,
            contentType: false,
            processData: false,
            cache: false,
            success: function(data)
            {
                alert("You have uploaded a recording successfully! You may now close this page. ");
                console.log(data);
            }
        });
    }
</script>